public class Foothill08 {
    public static void main(String[] args) {
        Student[] oddClass = {
                new Student("bob", "joe", 95),
                new Student("fred", "todd", 123),
                new Student("adele", "john", 195),
                new Student("jack", "jill", 148),
                new Student("betty", "ross", 108),
                new Student("katy", "perry", 225),
                new Student("tim", "tom", 44),
                new Student("daniel", "paul", 452),
                new Student("graham", "mccartney", 295),
                new Student("lemmon", "joplin", 327),
                new Student("lot", "lit", 221),
                new Student("rock", "dwayne", 168),
                new Student("tip", "tip", 273),
                new Student("knight", "rob", 421),
                new Student("plent", "timmon", 416),};
        Student[] evenClass = {
                //change the numbers
                new Student("bob", "joe", 95),
                new Student("fred", "todd", 123),
                new Student("adele", "john", 195),
                new Student("", "jill", 148),
                new Student("betty", "ross", 108),
                new Student("katy", "perry", 225),
                new Student("tim", "tom", 44),
                new Student("daniel", "", 452),
                new Student("graham", "mccartney", 295),
                new Student("lemmon", "joplin", 327),
                new Student("lot", "", 221),
                new Student("rock", "dwayne", 168),
                new Student("tip", "tip", 273),
                new Student("knight", "rob", 421),
                new Student("plent", "timmon", 416),
                new Student("bot", "tob", 194),
        };
        Student[] smallClass = {
                new Student("sally", "cally", 375)
        };
        Student[] noClass = {};
        int firstSort = Student.SORT_BY_FIRST;
        int pointsSort = Student.SORT_BY_POINTS;
        StudentArrayUtilities.toString("Before: ", evenClass);
        System.out.println("Sorting by default-------------");
        StudentArrayUtilities.arraySort(evenClass);
        StudentArrayUtilities.toString("After:", evenClass);
        System.out.println("Sorting by first name ---------------");
        Student.setSortKey(firstSort);
        StudentArrayUtilities.arraySort(evenClass);
        StudentArrayUtilities.toString("After: ", evenClass);
        System.out.println("Sorting by total points ---------------");
        Student.setSortKey(pointsSort);
        StudentArrayUtilities.arraySort(evenClass);
        StudentArrayUtilities.toString("After: ", evenClass);
        // first set sort key to first name then find median and then check if the sort key is still first name
        Student.setSortKey(Student.SORT_BY_FIRST);
        System.out.println("Median of evenClass = "
                + StudentArrayUtilities.getMedianDestructive(evenClass));
        if (Student.getSortKey() == Student.SORT_BY_FIRST)
            System.out.println("Successfully preserved sort key.");
        else
            System.out.println("There was an error with the validation of the sort key");
        // test odd class
        System.out.println("Median of oddClass = "
                + StudentArrayUtilities.getMedianDestructive(oddClass));
        // test one-student class
        System.out.println("Median of smallClass = "
                + StudentArrayUtilities.getMedianDestructive(smallClass));
        // test no-student class
        System.out.println("Median of noClass = "
                + StudentArrayUtilities.getMedianDestructive(noClass));
    }
}

class Student {
    public static final int SORT_BY_FIRST = 88;
    public static final int SORT_BY_LAST = 98;
    public static final int SORT_BY_POINTS = 108;
    private static int sortKey = SORT_BY_LAST;
    private String lastName;
    private String firstName;
    private int totalPoints;

    public static final String DEFAULT_NAME = "zz-error";
    public static final int DEFAULT_POINTS = 0;
    public static final int MAX_POINTS = 1000;

    public static boolean setSortKey(int key) {
        if (key == SORT_BY_FIRST || key == SORT_BY_LAST || key == SORT_BY_POINTS) {
            sortKey = key;
            return true;
        }
        return false;
    }

    public static int getSortKey() {
        return sortKey;
    }

    // constructor requires parameters - no default supplied
    public Student(String last, String first, int points) {
        if (!setLastName(last))
            lastName = DEFAULT_NAME;
        if (!setFirstName(first))
            firstName = DEFAULT_NAME;
        if (!setPoints(points))
            totalPoints = DEFAULT_POINTS;
    }

    public String getLastName() {
        return lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public int getTotalPoints() {
        return totalPoints;
    }

    public boolean setLastName(String last) {
        if (!validString(last)) {
            return false;
        }
        lastName = last;
        return true;
    }

    public boolean setFirstName(String first) {
        if (!validString(first)) {
            return false;
        }
        firstName = first;
        return true;
    }

    public boolean setPoints(int pts) {
        if (!validPoints(pts)) {
            return false;
        }
        totalPoints = pts;
        return true;
    }

    public static int compareTwoStudents(Student firstStud, Student secondStud) {
        int result;
        if (sortKey == SORT_BY_FIRST) {
            result = firstStud.getFirstName().compareToIgnoreCase(secondStud.getFirstName());
            return result;
        }
        if (sortKey == SORT_BY_LAST) {
            result = firstStud.getLastName().compareToIgnoreCase(secondStud.getLastName());
            return result;
        }
        if (sortKey == SORT_BY_POINTS) {
            result = firstStud.totalPoints - secondStud.totalPoints;
            return result;
        } else {
            result = DEFAULT_POINTS;
            return result;
        }
    }

    public String toString() {
        String resultString;
        resultString = " " + lastName
                + ", " + firstName
                + " points: " + totalPoints
                + "\n";
        return resultString;
    }

    private static boolean validString(String testStr) {
        if (testStr != null && testStr.length() > 0 && Character.isLetter(testStr.charAt(0))) {
            return true;
        }
        return false;
    }

    private static boolean validPoints(int testPoints) {
        if (testPoints >= 0 && testPoints <= MAX_POINTS)
            return true;
        return false;
    }
}

class StudentArrayUtilities {
    public static void toString(String title, Student[] data) {
        String output = title + "\n";
        // build the output string from the individual Students:
        for (int k = 0; k < data.length; k++)
            output += " " + data[k].toString();
        System.out.println(output);
    }

    // returns true if a modification was made to the array
    private static boolean floatLargestToTop(Student[] data, int top) {
        boolean changed = false;
        Student temp;
        // compare with client call to see where the loop stops
        for (int k = 0; k < top; k++)
            if (Student.compareTwoStudents(data[k], data[k + 1]) > 0) {
                temp = data[k];
                data[k] = data[k + 1];
                data[k + 1] = temp;
                changed = true;
            }
        return changed;
    }

    // public callable arraySort() - assumes Student class has a compareTo()
    public static void arraySort(Student[] array) {
        for (int k = 0; k < array.length; k++)
            // compare with method def to see where inner loop stops
            if (!floatLargestToTop(array, array.length - 1 - k))
                return;
    }

    public static double getMedianDestructive(Student[] array) {
        int sortKey, arrLen, justBelow, justAbove;
        double medianVal;
        arrLen = array.length;
        if (arrLen == 0)
            return 0.0;
        if (arrLen == 1)
            return array[0].getTotalPoints();
        //restore sort key
        sortKey = Student.getSortKey();
        //set sort key to sort by points and and sort the array
        Student.setSortKey(Student.SORT_BY_POINTS);
        arraySort(array);
        if (arrLen % 2 == 0) {
            justBelow = (arrLen / 2 - 1);
            justAbove = arrLen / 2;
            medianVal = (array[justBelow].getTotalPoints()
                    + array[justAbove].getTotalPoints()) / (double) 2;
        } else
            medianVal = array[arrLen / 2].getTotalPoints();
        // restore the sort key to what it was before the call
        Student.setSortKey(sortKey);
        return medianVal;
    }
}
